Let's start with the project!
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import pandas_datareader as web

# Ask for the number of stocks the user wants to preselect
a = None
while a is None:
  try:
    a = int(input("Type the number of stocks you want to preselect: "))
  except ValueError:
    print ("You must type an integer, please try again.")

# Ask for start date
startdate = None
while startdate is None:
  try:
    startdate = str(input("Enter start date in YYYY-MM-DD format: "))
  except ValueError:
    print ("You must type a date format, please try again.")

# Ask for end date
enddate = None
while enddate is None:
  try:
    enddate = str(input("Enter end date in YYYY-MM-DD format: "))
  except ValueError:
    print ("You must type a date format, please try again.")
  if startdate > enddate:
    raise ValueError('Start date must be less than end date')

# Ask the user to input the tickers
tick = []
i = 1
while i <= a: 
  try: 
    x = str(input(f'Enter a {i}th Ticker: ')) 
    x = x.upper()
    tick.append(x)
    i += 1 
  except ValueError:
    print("Error - you have to enter a string. Try again.") 

# Print the ticker list
print("the ticker list is:", tick )

# Ask the user to input the risk free rate
riskfree = None
while riskfree is None:
  try:
    riskfree = float(input("Enter the risk free rate in decimals: "))
  except ValueError:
    print ("You must type a float")


# Getting historical stock prices from Yahoo Finance
price_data = web.get_data_yahoo(tick,
                           start = startdate,
                           end = enddate)['Adj Close']

# Remove stocks that were not available during this time period and remove the tickers that do not exist
price_data = price_data.dropna(axis=1, how='all')

# Computing the log returns
log_ret = np.log(price_data/price_data.shift(1))

###################################################################################

# We should add here a part where we get additional info from yahoo finance for each 
# preselected stock and we compute for each stock some performance and risk metrics. 
# Based on this additional information, the user then selects the final sample of stocks 
# he wants to put in his portfolio and the rest of the code does the 3 types of portfolio optimization.

##################################################################################


# Computing the variance-covariance matrix
cov_mat = log_ret.cov() * 252
print(cov_mat)

# Simulating 7500 portfolios
n_portfolio = 7500

# Creating empty arrays to store portfolio weights, return, risk, and sharpe ratio 
all_wts = np.zeros((n_portfolio, len(price_data.columns)))
port_returns = np.zeros((n_portfolio))
port_risk = np.zeros((n_portfolio))
sharpe_ratio = np.zeros((n_portfolio))

# Simulating the 7500 portfolios and storing their weights, returns, volatility, sharpe ratio
for i in range(n_portfolio):
  # Generating randon weigths using a uniform distribution
  wts = np.random.uniform(size = len(price_data.columns))
  wts = wts/np.sum(wts)
  
  # Storing weights 
  all_wts[i,:] = wts
  
  # Storing return
  port_ret = np.sum(log_ret.mean() * wts)
  port_ret = (port_ret + 1) ** 252 - 1
  port_returns[i] = port_ret
  
  # Storing risk
  port_sd = np.sqrt(np.dot(wts.T, np.dot(cov_mat, wts)))
  port_risk[i] = port_sd
  
  # Storing Sharpe Ratio  
  sr = (port_ret - riskfree) / port_sd
  sharpe_ratio[i] = sr

names = price_data.columns

# Finding the minimum variance portfolio
min_var = all_wts[port_risk.argmin()]
print(min_var)

# Finding the tangency portfolio
max_sr = all_wts[sharpe_ratio.argmax()]
print(max_sr)

# Finding the equally weighted portfolio
eq_wts = []
for i in range(len(wts)):
 eq_wts.append(1/len(wts))
print(eq_wts)


################################################################################

# Here we can probably add some graphs and performance and risk metrics for each 
#optimization so that the user can select the optimization he prefers

################################################################################
